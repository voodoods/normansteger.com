// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ContentNotFound /> component index expects component to match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ContentNotFound
    dropReport={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <img
          alt="Content not Found"
          src="robot_broken.svg"
        />,
        <h3>
          Uh oh... this isn‘t supposed to happen :(
        </h3>,
        <p>
          If you read this, please take a moment to 
          <span
            onClick={[Function]}
          >
            drop me a message
          </span>
          . I‘d be most greatful and will fix the issue as soon as I get back to the keyboard.
        </p>,
      ],
      "className": "ContentNotFound",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "alt": "Content not Found",
          "src": "robot_broken.svg",
        },
        "ref": null,
        "rendered": null,
        "type": "img",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Uh oh... this isn‘t supposed to happen :(",
        },
        "ref": null,
        "rendered": "Uh oh... this isn‘t supposed to happen :(",
        "type": "h3",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "If you read this, please take a moment to ",
            <span
              onClick={[Function]}
            >
              drop me a message
            </span>,
            ". I‘d be most greatful and will fix the issue as soon as I get back to the keyboard.",
          ],
        },
        "ref": null,
        "rendered": Array [
          "If you read this, please take a moment to ",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "drop me a message",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": "drop me a message",
            "type": "span",
          },
          ". I‘d be most greatful and will fix the issue as soon as I get back to the keyboard.",
        ],
        "type": "p",
      },
    ],
    "type": Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "sc-bdVaJa",
        "isStatic": true,
        "rules": Array [
          "
  width: 50%;

  img {
    margin-top: 3em;
    width: 50%;
  }

  h3 {
    margin: 0;
  }

  span {
    color: blue;
    font-weight: bold;
    text-decoration: underline;
    cursor: pointer;
    &:hover {
      opacity: 0.6;
    }
  }
",
        ],
      },
      "displayName": "styled.div",
      "foldedComponentIds": Array [],
      "render": [Function],
      "styledComponentId": "sc-bdVaJa",
      "target": "div",
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <img
            alt="Content not Found"
            src="robot_broken.svg"
          />,
          <h3>
            Uh oh... this isn‘t supposed to happen :(
          </h3>,
          <p>
            If you read this, please take a moment to 
            <span
              onClick={[Function]}
            >
              drop me a message
            </span>
            . I‘d be most greatful and will fix the issue as soon as I get back to the keyboard.
          </p>,
        ],
        "className": "ContentNotFound",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "alt": "Content not Found",
            "src": "robot_broken.svg",
          },
          "ref": null,
          "rendered": null,
          "type": "img",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Uh oh... this isn‘t supposed to happen :(",
          },
          "ref": null,
          "rendered": "Uh oh... this isn‘t supposed to happen :(",
          "type": "h3",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "If you read this, please take a moment to ",
              <span
                onClick={[Function]}
              >
                drop me a message
              </span>,
              ". I‘d be most greatful and will fix the issue as soon as I get back to the keyboard.",
            ],
          },
          "ref": null,
          "rendered": Array [
            "If you read this, please take a moment to ",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "drop me a message",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "drop me a message",
              "type": "span",
            },
            ". I‘d be most greatful and will fix the issue as soon as I get back to the keyboard.",
          ],
          "type": "p",
        },
      ],
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-bdVaJa",
          "isStatic": true,
          "rules": Array [
            "
  width: 50%;

  img {
    margin-top: 3em;
    width: 50%;
  }

  h3 {
    margin: 0;
  }

  span {
    color: blue;
    font-weight: bold;
    text-decoration: underline;
    cursor: pointer;
    &:hover {
      opacity: 0.6;
    }
  }
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-bdVaJa",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
